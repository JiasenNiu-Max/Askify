"""User Like model."""

import datetime

from app.extensions import db
from app.utils import format_datetime_to_readable_string, generate_time


class UserLike(db.Model):
    """User Like model."""

    id: int = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id: str = db.Column(db.String(36), db.ForeignKey("user.id"), nullable=False)
    request_id: int = db.Column(db.Integer, db.ForeignKey("request.id"), nullable=False)
    reply_id: int = db.Column(db.Integer, db.ForeignKey("reply.id"), nullable=True)
    create_at: datetime = db.Column(db.DateTime, default=generate_time())

    user = db.relationship("User", backref=db.backref("user_likes", lazy=True))
    request = db.relationship("Request", backref=db.backref("user_likes", lazy=True))
    reply = db.relationship("Reply", backref=db.backref("user_likes", lazy=True))

    def __init__(self, user_id: str, request_id: int, reply_id: int = None) -> None:
        self.user_id = user_id
        self.request_id = request_id
        self.reply_id = reply_id

    def __repr__(self) -> str:
        """Return a string representation of the user record."""

        return f"<UserLike {self.request_id} {self.reply_id}>"

    # generated by copilot
    def to_dict(self) -> dict:
        """Return a JSON format of the user record."""

        return {
            "id": self.id,
            "user": self.user.to_dict() if self.user else None,
            "request": self.request.to_dict() if self.request else None,
            "reply": self.reply.to_dict() if self.reply else None,
            "create_at": format_datetime_to_readable_string(self.create_at),
        }
